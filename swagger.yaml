swagger: '2.0'
info:
  version: '1.0'
  title: "progettosauri"
  description: Progettosauri SE2 project - API documentation
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: progettosauri-se2-project.herokuapp.com
basePath: /api/v1
consumes:
- application/json
produces:
- application/json

tags:
  - name: "User Management"
  - name: "Exams"
  - name: "Tasks"
  - name: "Classes"
  - name: "Task Groups"
  - name: "Peer Reviews"

paths:
########################################################################   Users
  /users:
    # Sign Up
    post:
      summary: Register a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/UserPost"
      tags:
        - "User Management"
      responses:
        201:
          description: Success, user has been created
        400:
          description: Invalid parameters

  /users/{user_id}:
    # User details
    get:
      summary: Get details about a user
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
          description: Id of the desired user
      produces:
        - application/json
      tags:
        - "User Management"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad parameter
        404:
          description: User does not exist

    # Edit user details
    put:
      summary: Edit a user
      consumes:
        - application/json
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
          description: "User id"
        - in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/UserPut"
      tags:
        - "User Management"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: User does not exist

    # Delete user
    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
          description: The user id
      tags:
        - "User Management"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: User does not exist

########################################################################   Exams
  /exams:
    # Visualize exams
    get:
      summary: "View your exams"
      description: "View both the exams you have created, the ones you can participate in and those you have completed"
      tags:
        - "Exams"
      responses:
        200:
          description: Success

    # Create an exam
    post:
      summary: "Create an exam"
      description: "Create an exam from a set of tasks"
      tags:
        - "Exams"
      responses:
        201:
          description: Success, exam has been created
        400:
          description: Bad parameter

  /exams/{exam_id}:
    # Info about an exam
    get:
      summary: "Get info about an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Update info about an exam
    put:
      summary: "Update info about an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Delete an exam
    delete:
      summary: "Delete an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

  /exams/{exam_id}/tasks:
    # Get the evaluation for an exam
    get:
      summary: "View the contents of an exam"
      description: "View the contents of the specified exam. If called by a students, the exam is considered to be started."
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

  /exams/{exam_id}/evaluation:
    # Get the evaluation for an exam
    get:
      summary: "View the evaluation of an exam"
      description: "View the evaluation of the specified exam. If called by the exam creator returns every student's evaluation"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Evaluate an exam's answers
    post:
      summary: "Submit an evaluation for an exam"
      description: "Submit an evaluation for an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        201:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Modify the evaluation for an exam
    put:
      summary: "Modify an evaluation for an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

  /exams/{exam_id}/answers:
    # Get the answers for an exam
    get:
      summary: "View the answers of an exam"
      description: "If called by a student returns his own answers. If called by the exam creator returns every student's answers."
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Submit answers to an exam
    post:
      summary: "Send answers of an exam"
      description: "Send answers of an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        201:
          description: Success, submitted
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Modify answers to an exam
    put:
      summary: "Modify answers of an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success, submitted
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

########################################################################   Tasks
  /tasks:
    # Visualize available tasks
    get:
      summary: "View tasks created by and shared with the logged user"
      tags:
        - "Tasks"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              created:
                type: array
                items:
                  $ref: "#/definitions/Task"
              shared:
                type: array
                items:
                  $ref: "#/definitions/Task"
        400:
          description: Bad parameter

    # Create tasks
    post:
      summary: "Create a task"
      tags:
        - "Tasks"
      consumes:
        - application/json
      parameters:
        - in: body
          name: task
          required: true
          schema:
            $ref: "#/definitions/TaskPost"
      responses:
        201:
          description: Success, task has been created
        400:
          description: Bad parameters

  /tasks/{task_id}:
    # Visualize a task
    get:
      summary: "View details of a task"
      tags:
        - "Tasks"
      parameters:
        - in: path
          name: task_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Task"
        403:
          description: Permission denied
        404:
          description: Task does not exist

    # Update a task
    put:
      summary: "Update a task"
      tags:
        - "Tasks"
      consumes:
        - application/json
      parameters:
        - in: path
          name: task_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task
        - in: body
          name: task
          required: true
          schema:
            $ref: "#/definitions/TaskPut"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Task"
        403:
          description: Permission denied
        404:
          description: Task does not exist

    # Delete a task
    delete:
      summary: "Delete a task"
      tags:
        - "Tasks"
      parameters:
        - in: path
          name: task_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task
      responses:
        200:
          description: Success
        403:
          description: Permission denied
        404:
          description: Task does not exist

######################################################################   Classes
  /classes:
    # Get classes
    get:
      summary: "Get all classes"
      tags:
        - "Classes"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Class"
        403:
          description: Permission denied

    # Create a class
    post:
      summary: "Create a group of students identified as a class"
      tags:
        - "Classes"
      consumes:
        - application/json
      parameters:
        - in: body
          name: class
          required: true
          schema:
            $ref: "#/definitions/ClassPost"
      responses:
        201:
          description: Success, created
        400:
          description: Bad parameters

  /classes/{class_id}:
    # Get info about a specific class
    get:
      summary: "Get information about a class"
      tags:
        - "Classes"
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
          minimum: 1
          description: Id of the class
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Class"
        403:
          description: Permission denied
        404:
          description: Resource not found

    # Modify a specific class
    put:
      summary: "Modify a class"
      tags:
        - "Classes"
      consumes:
        - application/json
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
          minimum: 1
          description: Id of the class
        - in: body
          name: class
          schema:
            $ref: "#/definitions/ClassPut"
      produces:
        - application/json
      responses:
        200:
          description: Success, created
          schema:
            $ref: "#/definitions/Class"
        400:
          description: Bad parameters

    # delete a class
    delete:
      summary: "Delete a class"
      tags:
        - "Classes"
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
          minimum: 1
          description: Id of the class
      responses:
        200:
          description: Success
        400:
          description: Bad parameters

##################################################################   Task Groups
  /task_groups:
    # Get Task Groups
    get:
      summary: "Get task groups"
      tags:
        - "Task Groups"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              created:
                type: array
                items:
                  $ref: "#/definitions/TaskGroup"
              shared:
                type: array
                items:
                  $ref: "#/definitions/TaskGroup"
        400:
          description: Bad parameters
        404:
          description: Resource not found

    # Create a Task Group
    post:
      summary: "Create a group of tasks"
      tags:
        - "Task Groups"
      consumes:
        - application/json
      parameters:
        - in: body
          name: task_group
          required: true
          schema:
            $ref: "#/definitions/TaskGroupPost"
      responses:
        201:
          description: Success, a task group has been created
        400:
          description: Bad parameters

  /task_groups/{task_group_id}:
    # Get Task Groups
    get:
      summary: "View a task group"
      tags:
        - "Task Groups"
      parameters:
        - in: path
          name: task_group_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task group
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/TaskGroup"
        400:
          description: Bad parameters

    # Edit a task group
    put:
      summary: "Edit a task group"
      tags:
        - "Task Groups"
      consumes:
        - application/json
      parameters:
        - in: path
          name: task_group_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task group
        - in: body
          name: taksGroup
          required: true
          schema:
            $ref: "#/definitions/TaskGroupPut"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/TaskGroup"
        403:
          description: Permission denied
        404:
          description: Task group does not exist


    # Delete a task group
    delete:
      summary: "Delete a task group"
      tags:
        - "Task Groups"
      parameters:
        - in: path
          name: task_group_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task group
      responses:
        200:
          description: Success
        403:
          description: Permission denied
        404:
          description: Task group does not exist

##################################################################   Definitions
definitions:

  User:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
      password:
        type: string
      name:
        type: string
      surname:
        type: string

  UserPost:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      name:
        type: string
      surname:
        type: string
    required:
      - email
      - password
      - name
      - surname

  UserPut:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
      name:
        type: string
      surname:
        type: string

  Task:
    type: object
    properties:
      id:
        type: integer
      text:
        type: string
      answers:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            text:
              type: string
            correct:
              type: boolean

  TaskPost:
    type: object
    properties:
      text:
        type: string
      answers:
        type: array
        items:
          type: object
          properties:
            text:
              type: string
            correct:
              type: boolean
          required:
            - text
            - correct
    required:
      - text

  TaskPut:
    type: object
    properties:
      text:
        type: string
      answers:
        type: array
        items:
          type: object
          properties:
            text:
              type: string
            correct:
              type: boolean

  TaskGroup:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      tasks:
        type: array
        items:
          type: integer

  TaskGroupPost:
    type: object
    properties:
      name:
        type: string
      tasks:
        type: array
        items:
          type: integer
    required:
      - name

  TaskGroupPut:
    type: object
    properties:
      name:
        type: string
      tasks:
        type: array
        items:
          type: integer

  Class:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      users:
        type: array
        items:
          type: integer

  ClassPost:
    type: object
    properties:
      name:
        type: string
      users:
        type: array
        items:
          type: integer
    required:
      - name

  ClassPut:
    type: object
    properties:
      name:
        type: string
      users:
        type: array
        items:
          type: integer

  Exam:
    properties:
      id:
        type: integer
      name:
        type: string
      taskGroup:
        type: integer
      mode:
        type: string
        enum: ["exam", "crowd sourcing"]
      class:
        type: integer
      TA:
        type: array
        items:
          type: integer
      deadline:
        type: string
        format: date-time
      duration:
        type: integer
      start:
        type: string
        format: date-time
    required:
      - name
      - mode
      - taskGroup
      - class
      - deadline
      - start

  Submission:
    properties:
      answers:
        type: array
        items:
          type: object
          properties:
            task:
              type: integer
            answer:
              type: string
            scelta:
              type: array
              items:
                type: integer
          required:
            - task
    required:
      - answers

  PeerReview:
    properties:
      id:
        type: integer
      tasks:
        type: array
        items:
          type: object
          properties:
            task:
              type: integer
            user:
              type: integer
            comment:
              type: string
