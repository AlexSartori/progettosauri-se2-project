swagger: '2.0'
info:
  version: '1.0'
  title: "progettosauri"
  description: Progettosauri SE2 project - API documentation
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: progettosauri-se2-project.herokuapp.com
basePath: /api/v1
consumes:
- application/json
produces:
- application/json

tags:
  - name: "User Management"
  - name: "Exams"
  - name: "Tasks"
  - name: "Classes"
  - name: "Task Groups"
  - name: "Peer Reviews"

paths:
########################################################################   Users
  /users:
    # Sign Up
    post:
      summary: Register a new user
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/UserPost"
      tags:
        - "User Management"
      responses:
        201:
          description: Success, user has been created
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Invalid parameters

  /users/{user_id}:
    # User details
    get:
      summary: Get details about a user
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
          description: Id of the desired user
      produces:
        - application/json
      tags:
        - "User Management"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad parameter
        404:
          description: User does not exist

    # Edit user details
    put:
      summary: Edit a user
      consumes:
        - application/json
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
          description: "User id"
        - in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/UserPut"
      tags:
        - "User Management"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: User does not exist

    # Delete user
    delete:
      summary: Delete a user
      parameters:
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
          description: The user id
      tags:
        - "User Management"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: User does not exist

########################################################################   Exams
  /exams:
    # Visualize exams
    get:
      summary: "View your exams"
      description: "View both the exams you have created, the ones you can participate in and those you have completed"
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              created:
                type: array
                items:
                  $ref: "#/definitions/Exam"
              accessible:
                type: array
                items:
                  $ref: "#/definitions/Exam"
              evaluated:
                type: array
                items:
                  $ref: "#/definitions/Exam"

    # Create an exam
    post:
      summary: "Create an exam"
      description: "Create an exam from a set of tasks"
      tags:
        - "Exams"
      consumes:
        - application/json
      parameters:
        - in: body
          name: exam
          required: true
          schema:
            $ref: "#/definitions/ExamPost"
      responses:
        201:
          description: Success, exam has been created
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameter

  /exams/{exam_id}:
    # Info about an exam
    get:
      summary: "Get info about an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: Bad parameter
        403:
          description: The authenticated user is not the creator of this exam or is not enrolled.
        404:
          description: Exam does not exist

    # Update info about an exam
    put:
      summary: "Update info about an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
        - in: body
          name: exam
          required: true
          schema:
            $ref: "#/definitions/ExamPut"
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Exam"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Delete an exam
    delete:
      summary: "Delete an exam"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      responses:
        200:
          description: Success
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

  /exams/{exam_id}/tasks:
    # Get the evaluation for an exam
    get:
      summary: "View the contents of an exam"
      description: "View the contents of the specified exam. If called by a students, the exam is considered to be started."
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/ExamTask"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

  /exams/{exam_id}/evaluation:
    # Get the evaluation for an exam
    get:
      summary: "View the evaluation of an exam"
      description: "View the evaluation of the specified exam. If called by the exam creator returns every student's evaluation"
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Evaluation"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Evaluate an exam's answers
    post:
      summary: "Submit an evaluation for an exam"
      description: "Submit an evaluation for an exam"
      consumes:
        - application/json
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
        - in: body
          name: evaluations
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/EvaluationPost"
      tags:
        - "Exams"
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Modify the evaluation for an exam
    put:
      summary: "Modify an evaluation for an exam"
      consumes:
        - application/json
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
        - in: body
          name: evaluations
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Evaluation"
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Evaluation"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

  /exams/{exam_id}/answers:
    # Get the answers for an exam
    get:
      summary: "View the answers of an exam"
      description: "If called by a student returns his own answers. If called by the exam creator returns every student's answers."
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Submission"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Submit answers to an exam
    post:
      summary: "Send answers of an exam"
      description: "Send answers of an exam"
      consumes:
        - application/json
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
        - in: body
          name: submissions
          required: true
          schema:
            $ref: "#/definitions/SubmissionPost"
      tags:
        - "Exams"
      responses:
        201:
          description: Success, submitted
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Modify answers to an exam
    put:
      summary: "Modify the answers of an exam"
      consumes:
        - application/json
      parameters:
        - in: path
          name: exam_id
          required: true
          type: integer
          minimum: 1
          description: Id of the exam
        - in: body
          name: submissions
          required: true
          schema:
            $ref: "#/definitions/Submission"
      tags:
        - "Exams"
      produces:
        - application/json
      responses:
        200:
          description: Success, submitted
          schema:
            $ref: "#/definitions/Submission"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

########################################################################   Tasks
  /tasks:
    # Visualize available tasks
    get:
      summary: "View tasks created by and shared with the logged user"
      tags:
        - "Tasks"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              created:
                type: array
                items:
                  $ref: "#/definitions/Task"
              shared:
                type: array
                items:
                  $ref: "#/definitions/Task"
        400:
          description: Bad parameter

    # Create tasks
    post:
      summary: "Create a task"
      tags:
        - "Tasks"
      consumes:
        - application/json
      parameters:
        - in: body
          name: task
          required: true
          schema:
            $ref: "#/definitions/TaskPost"
      responses:
        201:
          description: Success, task has been created
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameters

  /tasks/{task_id}:
    # Visualize a task
    get:
      summary: "View details of a task"
      tags:
        - "Tasks"
      parameters:
        - in: path
          name: task_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Task"
        403:
          description: Permission denied
        404:
          description: Task does not exist

    # Update a task
    put:
      summary: "Update a task"
      tags:
        - "Tasks"
      consumes:
        - application/json
      parameters:
        - in: path
          name: task_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task
        - in: body
          name: task
          required: true
          schema:
            $ref: "#/definitions/TaskPut"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Task"
        403:
          description: Permission denied
        404:
          description: Task does not exist

    # Delete a task
    delete:
      summary: "Delete a task"
      tags:
        - "Tasks"
      parameters:
        - in: path
          name: task_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task
      responses:
        200:
          description: Success
        400:
          description: Bad parameters
        403:
          description: Permission denied
        404:
          description: Task does not exist

######################################################################   Classes
  /classes:
    # Get classes
    get:
      summary: "Get all classes"
      tags:
        - "Classes"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Class"
        403:
          description: Permission denied

    # Create a class
    post:
      summary: "Create a group of students identified as a class"
      tags:
        - "Classes"
      consumes:
        - application/json
      parameters:
        - in: body
          name: class
          required: true
          schema:
            $ref: "#/definitions/ClassPost"
      responses:
        201:
          description: Success, created
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameters

  /classes/{class_id}:
    # Get info about a specific class
    get:
      summary: "Get information about a class"
      tags:
        - "Classes"
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
          minimum: 1
          description: Id of the class
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Class"
        403:
          description: Permission denied
        404:
          description: Resource not found

    # Modify a specific class
    put:
      summary: "Modify a class"
      tags:
        - "Classes"
      consumes:
        - application/json
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
          minimum: 1
          description: Id of the class
        - in: body
          name: class
          schema:
            $ref: "#/definitions/ClassPut"
      produces:
        - application/json
      responses:
        200:
          description: Success, created
          schema:
            $ref: "#/definitions/Class"
        400:
          description: Bad parameters

    # delete a class
    delete:
      summary: "Delete a class"
      tags:
        - "Classes"
      parameters:
        - in: path
          name: class_id
          required: true
          type: integer
          minimum: 1
          description: Id of the class
      responses:
        200:
          description: Success
        400:
          description: Bad parameters
        403:
          description: Permission denied
        404:
          description: Resource not found

##################################################################   Task Groups
  /task_groups:
    # Get Task Groups
    get:
      summary: "Get task groups"
      tags:
        - "Task Groups"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              created:
                type: array
                items:
                  $ref: "#/definitions/TaskGroup"
              shared:
                type: array
                items:
                  $ref: "#/definitions/TaskGroup"

    # Create a Task Group
    post:
      summary: "Create a group of tasks"
      tags:
        - "Task Groups"
      consumes:
        - application/json
      parameters:
        - in: body
          name: task_group
          required: true
          schema:
            $ref: "#/definitions/TaskGroupPost"
      responses:
        201:
          description: Success, a task group has been created
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameters

  /task_groups/{task_group_id}:
    # Get Task Groups
    get:
      summary: "View a task group"
      tags:
        - "Task Groups"
      parameters:
        - in: path
          name: task_group_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task group
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/TaskGroup"
        400:
          description: Bad parameters

    # Edit a task group
    put:
      summary: "Edit a task group"
      tags:
        - "Task Groups"
      consumes:
        - application/json
      parameters:
        - in: path
          name: task_group_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task group
        - in: body
          name: taksGroup
          required: true
          schema:
            $ref: "#/definitions/TaskGroupPut"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/TaskGroup"
        403:
          description: Permission denied
        404:
          description: Task group does not exist


    # Delete a task group
    delete:
      summary: "Delete a task group"
      tags:
        - "Task Groups"
      parameters:
        - in: path
          name: task_group_id
          required: true
          type: integer
          minimum: 1
          description: Id of the task group
      responses:
        200:
          description: Success
        403:
          description: Permission denied
        404:
          description: Task group does not exist

###################################################################   PeerReview
# Get 	/peer				vedo le peer review da fare/fatte/valutate
# Get 	/peer/peer_id/tasks		vedo i task da correggere della peer specifica
# Post	/peer/peer_id/review 		mando la review della peer specifica
# Put					modifico la review specifica
# Get					ottengo la review inviata precedentemente
# Post	/peer/peer_id/evaluation 	invio la valutazione delle peer review riguardo all’esame specifico
# Get				    	leggo la valutazione della peer review riguardo all’esame specifico
# Put				    	modifico la valutazione della peer review riguardo all’esame specifico
  /peer:
    # Get list of PeerReviews
    get:
      summary: "Get peer reviews"
      description: "Get a list of the peer reviews you have to do, done, to evaluate, evaluated"
      tags:
        - "Peer Reviews"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              to_do:
                type: array
                description: "List of id of peer reviews to do as a student"
                items:
                  type: integer
              to_evaluate:
                type: array
                description: "List of id of peer reviews to evaluate as a TA"
                items:
                  type: integer
        400:
          description: Bad parameters

  /peer/{peer_id}/tasks:
    # Get list of task in peer review
    get:
      summary: "Get the list of tasks of a peer review"
      tags:
        - "Peer Reviews"
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Answer"
        404:
          description: Resource not found

  /peer/{peer_id}/review:
    # Get list of reviews
    get:
      summary: "Get the list of reviewed tasks"
      description: "A student will get only his reviewed tasks. A TA will get them from the class"
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
      tags:
        - "Peer Reviews"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Review"
        400:
          description: Bad parameters
        404:
          description: Resource not found

    # Create a review
    post:
      summary: "Create a review for the peer review"
      consumes:
        - application/json
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
        - in: body
          name: review
          required: true
          schema:
            $ref: "#/definitions/ReviewPost"
      tags:
        - "Peer Reviews"
      responses:
        201:
          description: Success, resource created
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameters
        404:
          description: Resource not found

    # Modify a review
    put:
      summary: "Modify a review for the peer review"
      consumes:
        - application/json
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
        - in: body
          name: review
          required: true
          schema:
            $ref: "#/definitions/Review"
      tags:
        - "Peer Reviews"
      produces:
        - application/json
      responses:
        201:
          description: Success, resource created
          schema:
            $ref: "#/definitions/Review"
        400:
          description: Bad parameters
        404:
          description: Resource not found

  /peer/{peer_id}/evaluation:
    # Get the evaluation for a peer review
    get:
      summary: "View the evaluation of a peer review"
      description: "View the evaluation of the specified peer review. If called by the exam creator returns every student's peer review"
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
      tags:
        - "Peer Reviews"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Evaluation"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Evaluate an peer review's answers
    post:
      summary: "Submit an evaluation for a peer review"
      description: "Submit an evaluation for a peer review"
      consumes:
        - application/json
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
        - in: body
          name: evaluations
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/EvaluationPost"
      tags:
        - "Peer Reviews"
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/IdPost"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

    # Modify the evaluation for a peer review
    put:
      summary: "Modify an evaluation for a peer review"
      consumes:
        - application/json
      parameters:
        - in: path
          name: peer_id
          required: true
          type: integer
          minimum: 1
          description: Id of the peer review
        - in: body
          name: evaluations
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Evaluation"
      tags:
        - "Peer Reviews"
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Evaluation"
        400:
          description: Bad parameter
        403:
          description: Permission denied
        404:
          description: Exam does not exist

##################################################################   Definitions
definitions:

  IdPost:
    type: object
    properties:
      id:
        type: integer
        description: "ID of the created object"

  User:
    type: object
    properties:
      id:
        type: integer
        description: "Identifier of the user"
      mail:
        type: string
        description: "Email of the user"
      password:
        type: string
        description: "Password of the user"
      name:
        type: string
        description: "Name of the user"

  UserPost:
    type: object
    properties:
      mail:
        type: string
        description: "Email of the user"
      password:
        type: string
        description: "Password of the user"
      name:
        type: string
        description: "Name of the user"
    required:
      - mail
      - password
      - name

  UserPut:
    type: object
    properties:
      mail:
        type: string
        description: "Email of the user"
      password:
        type: string
        description: "Password of the user"
      name:
        type: string
        description: "Name of the user"

  Task:
    type: object
    properties:
      id:
        type: integer
        description: "Identifier of the task"
      text:
        type: string
        description: "The question of the task"
      answers:
        type: array
        description: "List of possible answers. If it contains less than two answers the task will be an open answer task, otherwise a multiple chioce task"
        items:
          type: object
          description: "A single answer, it can be an open answer or a multiple choice answer"
          properties:
            id:
              type: integer
              description: "Identifier of the answer"
            text:
              type: string
              description: "The text of the answer"
            correct:
              type: boolean
              description: "Correctness of the answer"

  TaskPost:
    type: object
    properties:
      text:
        type: string
        description: "The question of the task"
      answers:
        type: array
        description: "List of possible answers. If it contains less than two answers the task will be an open answer task, otherwise a multiple chioce task"
        items:
          type: object
          description: "A single answer, it can be an open answer or a multiple choice answer"
          properties:
            text:
              type: string
              description: "The text of the answer"
            correct:
              type: boolean
              description: "Correctness of the answer"
          required:
            - text
            - correct
    required:
      - text

  TaskPut:
    type: object
    properties:
      text:
        type: string
        description: "The question of the task"
      answers:
        type: array
        description: "List of possible answers. If it contains less than two answers the task will be an open answer task, otherwise a multiple chioce task"
        items:
          type: object
          description: "A single answer, it can be an open answer or a multiple choice answer"
          properties:
            text:
              type: string
              description: "The text of the answer"
            correct:
              type: boolean
              description: "Correctness of the answer"

  TaskGroup:
    type: object
    properties:
      id:
        type: integer
        description: "Identifier of the task group"
      name:
        type: string
        description: "Name of the task group"
      tasks:
        type: array
        description: "List of id of tasks which belong to the task group"
        items:
          type: integer
          description: "Id which identifies a specific task"

  TaskGroupPost:
    type: object
    properties:
      name:
        type: string
        description: "Name of the task group"
      tasks:
        type: array
        description: "List of id of tasks which belong to the task group"
        items:
          type: integer
          description: "Id which identifies a specific task"
    required:
      - name

  TaskGroupPut:
    type: object
    properties:
      name:
        type: string
        description: "Name of the task group"
      tasks:
        type: array
        description: "List of id of tasks which belong to the task group"
        items:
          type: integer
          description: "Id which identifies a specific task"

  Class:
    type: object
    properties:
      id:
        type: integer
        description: "Identifier of the class"
      name:
        type: string
        description: "Name of the class"
      users:
        type: array
        description: "List of id of the users which belong to the class"
        items:
          type: integer
          description: "Id which identifies a specific user"

  ClassPost:
    type: object
    properties:
      name:
        type: string
        description: "Name of the class"
      users:
        type: array
        description: "List of id of the users which belong to the class"
        items:
          type: integer
          description: "Id which identifies a specific user"
    required:
      - name

  ClassPut:
    type: object
    properties:
      name:
        type: string
        description: "Name of the class"
      users:
        type: array
        description: "List of id of the users which belong to the class"
        items:
          type: integer
          description: "Id which identifies a specific user"

  Exam:
    type: object
    properties:
      id:
        type: integer
        description: "Id of the exam"
      name:
        type: string
        description: "Name of the exam"
      taskGroup:
        type: integer
        description: "Id of the taskGroup used in the exam"
      mode:
        type: string
        enum: ["exam", "crowd sourcing"]
        description: "If the value is exam the user has to answer all the tasks that belong in the taskGroup, otherwise every user has a different set of tasks"
      class:
        type: integer
        description: "Id of the class that has to answer the exam"
      TA:
        type: array
        description: "List of id of TA's to whom the exam has been shared"
        items:
          type: integer
          description: "Id of TA"
      deadline:
        type: string
        format: date-time
        description: "Expiring date of the exam"
      duration:
        type: integer
        description: "Number of minutes given to complete the exam"
      start:
        type: string
        format: date-time
        description: "Starting date of the exam"

  ExamPost:
    type: object
    properties:
      name:
        type: string
        description: "Name of the exam"
      taskGroup:
        type: integer
        description: "Id of the taskGroup used in the exam"
      mode:
        type: string
        enum: ["exam", "crowd sourcing"]
        description: "If the value is exam the user has to answer all the tasks that belong in the taskGroup, otherwise every user has a different set of tasks"
      class:
        type: integer
        description: "Id of the class that has to answer the exam"
      TA:
        type: array
        description: "List of id of TA's to whom the exam has been shared"
        items:
          type: integer
          description: "Id of TA"
      deadline:
        type: string
        format: date-time
        description: "Expiring date of the exam"
      duration:
        type: integer
        description: "Number of minutes given to complete the exam"
      start:
        type: string
        format: date-time
        description: "Starting date of the exam"
    required:
      - name
      - taskGroup
      - mode
      - class
      - deadline
      - start

  ExamPut:
    type: object
    properties:
      name:
        type: string
        description: "Name of the exam"
      taskGroup:
        type: integer
        description: "Id of the taskGroup used in the exam"
      mode:
        type: string
        enum: ["exam", "crowd sourcing"]
        description: "If the value is exam the user has to answer all the tasks that belong in the taskGroup, otherwise every user has a different set of tasks"
      class:
        type: integer
        description: "Id of the class that has to answer the exam"
      TA:
        type: array
        description: "List of id of TA's to whom the exam has been shared"
        items:
          type: integer
          description: "Id of TA"
      deadline:
        type: string
        format: date-time
        description: "Expiring date of the exam"
      duration:
        type: integer
        description: "Number of minutes given to complete the exam"
      start:
        type: string
        format: date-time
        description: "Starting date of the exam"

  ExamTask:
    type: object
    properties:
      id:
        type: integer
        description: "Identifier of the exam task"
      text:
        type: string
        description: "The question of the exam task"
      answers:
        type: array
        description: "List of possible answers. If it contains less than two answers the task will be an open answer task, otherwise a multiple chioce task"
        items:
          type: object
          description: "A single answer, it can be an open answer or a multiple choice answer"
          properties:
            id:
              type: integer
              description: "Identifier of the answer"
            text:
              type: string
              description: "The text of the answer"

  Submission:
    type: object
    properties:
      user_id:
        type: integer
        description: "Identifier of the user who answered the questions"
      answers:
        type: array
        description: "List of answers of the user"
        items:
          type: object
          description: "Answer of the user. It can be an open answer or a multiple choice answer"
          properties:
            task_id:
              type: integer
              description: "The task's id to which the answer refers"
            open_answer:
              type: string
              description: "The text of the open answer given by the user"
            selected_answer:
              type: array
              description : "List of id of the choices selected by the user"
              items:
                type: integer
                description: "Id of the single choice"

  SubmissionPost:
    type: object
    properties:
      user_id:
        type: integer
        description: "Identifier of the user who answered the questions"
      answers:
        type: array
        description: "List of answers of the user"
        items:
          type: object
          description: "Answer of the user. It can be an open answer or a multiple choice answer"
          properties:
            task_id:
              type: integer
              description: "The task's id to which the answer refers"
            open_answer:
              type: string
              description: "The text of the open answer given by the user"
            selected_answer:
              type: array
              description : "List of id of the choices selected by the user"
              items:
                type: integer
                description: "Id of the single choice"
          required:
            - task_id
    required:
      - user_id

  Evaluation:
    type: object
    properties:
      user_id:
        type: integer
        description: "Id of the user who took the exam"
      comment:
        type: string
        description: "Comment of the TA about the exam"
      mark:
        type: integer
        description: "Mark of the TA about the exam"
      tasks:
        type: array
        description: "List of tasks in the exam"
        items:
          type: object
          description: "Single task"
          properties:
            task_id:
              type: integer
              description: "Id of the task"
            comment:
              type: string
              description: "Comment of the specific task"
            mark:
              type: integer
              description: "Mark of the specific task"

  EvaluationPost:
    type: object
    properties:
      user_id:
        type: integer
        description: "Id of the user who took the exam"
      comment:
        type: string
        description: "Comment of the TA about the exam"
      mark:
        type: integer
        description: "Mark of the TA about the exam"
      tasks:
        type: array
        description: "List of tasks in the exam"
        items:
          type: object
          description: "Single task"
          properties:
            task_id:
              type: integer
              description: "Id of the task"
            comment:
              type: string
              description: "Comment of the specific task"
            mark:
              type: integer
              description: "Mark of the specific task"
          required:
            - task_id
            - mark
    required:
      - user_id

  Review:
    type: object
    properties:
      reviewer:
        type: integer
        description: "Id of the user who is evaluating the tasks"
      reviews:
        type: array
        description: "List of the reviews of each task"
        items:
          type: object
          description: "Single task review"
          properties:
            task_id:
              type: integer
              description: "Identifier of the specific task"
            comment:
              type: string
              description: "Comment of the specific task"

  ReviewPost:
    type: object
    properties:
      reviewer:
        type: integer
        description: "Id of the user who is evaluating the tasks"
      reviews:
        type: array
        description: "List of the reviews of each task"
        items:
          type: object
          description: "Single task review"
          properties:
            task_id:
              type: integer
              description: "Identifier of the specific task"
            comment:
              type: string
              description: "Comment of the specific task"
          required:
            - task_id
            - comment
    required:
      - reviewer

  Answer:
    type: object
    properties:
      task_id:
        type: integer
        description: "The task's id to which the answer refers"
      open_answer:
        type: string
        description: "The text of the open answer given by the user"
      selected_answer:
        type: array
        description : "List of id of the choices selected by the user"
        items:
          type: integer
          description: "Id of the single choice"
